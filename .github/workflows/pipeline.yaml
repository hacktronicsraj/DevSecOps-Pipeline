name: SonarQube Analysis, Build, and Docker Deploy

on:
  push:
    branches:
      - main

jobs:
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Download SonarQube Scanner
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH="$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin"

          # Run SonarQube Scanner
          sonar-scanner \
            -Dsonar.projectKey=DevSecOps-Pipeline \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

          # Extract details if available
          ceTaskUrl=$(grep -oP '(?<=ceTaskUrl=).*' ./.scannerwork/report-task.txt || echo "")
          echo "CE Task URL: $ceTaskUrl"
          if [ -z "$ceTaskUrl" ]; then
            echo "SonarQube Scanner did not produce an expected report. Please check the logs for issues."
            exit 1
          fi
          echo "ceTaskUrl=$ceTaskUrl" >> $GITHUB_ENV

      - name: Wait for SonarQube Analysis and Send Email
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          CE_TASK_URL: ${{ env.ceTaskUrl }}
        run: |
          # Poll the CE task until it's completed
          status="PENDING"
          while [ "$status" = "PENDING" ] || [ "$status" = "IN_PROGRESS" ]; do
            sleep 5
            response=$(curl -s -u $SONAR_TOKEN: "$CE_TASK_URL")
            status=$(echo "$response" | jq -r '.task.status')
            echo "Current status: $status"
          done
          if [ "$status" != "SUCCESS" ]; then
            echo "SonarQube analysis failed."
            exit 1
          fi
          analysisId=$(echo "$response" | jq -r '.task.analysisId')

          # Retrieve SonarQube Analysis Report
          reportUrl="$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysisId"
          response=$(curl -s -u $SONAR_TOKEN: "$reportUrl")
          echo "$response" > sonarqube_report.json
          status=$(echo "$response" | jq -r '.projectStatus.status')

          # Configure and send email using an appropriate action
          echo "Sending email with SonarQube report..."
          echo "Quality Gate Status: $status"

          # You might want to substitute the following email sending section with a real action or method
          echo "Email feature requires a valid method or action configuration"

  docker-build-and-deploy:
    name: Docker Build and Deploy
    runs-on: ubuntu-latest
    needs: sonarqube-analysis # This is optional, use it if you want Docker build to wait for SonarQube
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t rajashekar1/my-f1hub:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push rajashekar1/my-f1hub:${{ github.sha }}
